# 04장 변수

### **변수**

변수란 프로그래밍 언어에서 데이터를 관리 하기 위한 핵심 개념이다.

변수엔 하나의 값만 저장이 가능하며 여러개의 값을 사용 하고 싶을때는 여러개의 변수를 사용해야 한다.

단, 배열이나 객체 같은 자료구조를 사용하면 여러개의 값을 그룹화하여 사용할 수 있다.

```jsx
10+20 
```

10,20,+ 는 메모리 상의 임의의 위치에서 기억되고있는 값을 읽어 들여 연산을 하였으나

30이라는 값을 재사용할 수 없다. 메모리 주소를 통해 값에 접근 하는것은 오류를 발생 시킬 수 있다.

프로그래밍 언어는 기억하고 싶은 값을 메모리에 저장 하고 재사용 하기 위해 변수라는 메커니즘을 제공한다.

**변수는 하나의 값을 저장 하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙여진 이름을 뜻 한다.**

메모리는 스텍에 저장이 된다 // 스택큐

```jsx
var result = 10 + 20 ;
```

10+20 으로 새로운 값 30을 생성하여 메모리 공간에 저장을 하고 이것을 다시 읽어들여 재사용 할수있도록 값에 상징적인 이름을 붙인것으로 변수이다.

- result → 변수 명
- 30 → 변수 값

result에 30이라는 값을 할당했다 (할당 → 변수에 값을 대입, 저장 하는것)

변수 이름은 사람이 이해할 수 있는 언어로 메모리 공간에 붙인 이름을 참조하여 저장 된 값을 반환 시킬 수 있다.

```jsx
result                   // 30 
```

### **식별자**

식별자는 어떤 값을 구별하여 식별할 수 있는 고유한 이름을 말한다.

값은 메모리 공간에 저장 되어 있어 식별자는 메모리공간에 저장 되어 있는 값들을 구별해 내야 한다.  이를 위해 식별자는 값이 저장 되어 있는 메모리 주소를 기억해야하는데 

식별자는 값이 아니라 메모리 주소를 기억한다. 즉*, 식별자는 주소에 붙인 이름이라 할 수 있다.*

**식별자는 변수 이름 뿐만이 아니라 메모리상에 존재하는 어떤 값을 식별할수있는 모든 이름을 식별자라고 부른다.**

### 변수선언

변수 선언이란 변수를 생성하는 것으로 값을 저장하기 위한 메모리 공간을 확보하고 변수 이름과 확보된 메뫼 공간의 주소를 연결 해서 값을 저장할 수 있게 준비하는 것.

변수를 사용하려면 반드시 선언이 필요하다. 변수를 선언 할때는 var, let, const 키워드를 사용한다.

```jsx
var score;    // 변수 선언문 (변수 선언)
```

변수를 선언한 후 값을 할당 하지 않았기 때문에 암묵적으로 score에는 undefined가 할당 되어진다.

이것은 자바스크립트의 독특한 특징이다.

변수 선언에는 두가지 단계를 거치는데 

- 변수 선언 : 변수 이름을 등록해서 자바스크립트 엔진에 변수 이름을 알린다.
- 초기화 단계 : 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화 한다.

초기화란 , 변수가 선언 된 이후 최초로 값을 할당하는 것을 말한다.

만약 초기화 단계를 거치지 않으면 확보된 메모리 공간에는 이전에 사용했던 다른 애플리케이션이 사용했던 값이 남아 있을 수 있다. 이러한 값을 쓰레기 값이라 하는데 메모리 값을 확보한 다음 값을 할당하지 않은 상태에서 곧바로 변수 값을 참조하면 쓰레기 값이 나올 수 있다.

var 는 암묵적으로 초기화 단계를 거치기 때문에 이러한 위험으로부터 안전하다.

선언을 하지않은 식별자에게 접근하려 하면 referenceError(참조에러)가 발생할수있다.

참조에러는 식별자를 통해 값을 참조하려 했지만 식별자를 찾을 수 없을때 나는 에러이다.

### **값의 할당**

값을 할당 할 때는 = 를 사용 한다.

=연산자는 우변의 값을 좌변에 대입한다는 뜻을 가지고 있다.

```jsx
var score;        //변수 선언 
score = 80 ;      //값의 할당
```

```jsx
var score = 80 ;    //변수 선언과 값의 할당 
```

동작은 동일 하게 하나 변수의 선언과 값의 할당의 실행 시점이 다르다.

var score 로 변수를 먼저 선언한 경우 undefined로 값이 할당 된 후 score=80으로 undefined가 80으로 변경이 된다.

하나의 문으로 작성을 하여도 변수의 선언과 값의 할당을 나누어 2개의 문으로 나누어 실행 하기 때문에 undefined가 할당 되는것은 동일하다.

```jsx
console.log(score);
score = 80;
var score;
console.log(score);    //80
```

값을 할당하고 변수를 선언 하여도 

변수 선언은 런타임 이전에 실행 되기 때문에 80이 나온다.

### 호이스팅

```jsx
console.log(score);    // undefined
var score;             // 변수 선언문 
```

console.log가 먼저 실행후 변수의 선언이 되었지만 

변수 선언이 소스코드가 한줄씩 실행 되는 시점 즉,런타임시점이 아니라 그 이전에 미리 실행 되기 때문에 오류가 없이 undefined를 출력한다.

**이처럼 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 호이스팅이라고 한다.**

변수 선언뿐만 아니라 var , let , const , function* , class 키워드를 사용하여 선언하는 모든 식별자는 호이스팅 된다. 모든 선언문은 런타임 이전에 실행 되기 때문이다.

 

### 값의 재할당

재할당이란 이미 할당되어 있는 변수에 새로운 값을 다시 할당하는 것을 말한다.

var 키워드로 선언한 변수는 재할당 할수있다. 선언한 변수는 선언한 동시에 undefined로 초기화 되기 때문에 엄밀히 말하자면 변수에 처음으로 값을 할당하는 것도 재할당이다.

값을 재할당할 수 없어서 변수에 저장된 값을 변경 할 수 없다면 변수가 아니라 상수라 한다.

**상수는 한번 정해지면 변하지 않는 값이다. 다시말해 상수는 단 한번만 할당 할 수있다**.

const오 선언한 변수는 재할당이 금지된다. const 키워드는 한번만 할당할 수 있는 변수를 선언하므로 상수를 표현할 수 있다.

재 할당되어 이전에 사용 된 불필요한 값은 가비지콜렉터에 의해 메모리에서 자동 해제 된다.

**가비지 콜렉터란 애플리케이션이 할당한 메모리공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제하는 기능을 말한다.**