# 07장 연산자

연산자는 연산을 수행하여 값을 만든다.

피연산자와 연산자의 조합으로 이루어진 연산자 표현식은 값을 만들어 평가 되기 때문에 표현식입니다. 

- 연산자 → 연산을 수행 하는 기호 ( + , - , * , % 등..)
- 피연산자 → 연산의 대상  ( 피연산자의 개수로 단항 연산자, 이항 연산자 등으로 분류 할 수 있다.)

### 산술 연산자

산술연산자는 피연산자를 대상으로 수학적 계산을 수행해 숫자 값을 만든다.

산술이 불가는 한경우는 NaN 반환!

```jsx
//이항 산술 연산자
5 + 2;    // 7
3 + 1;    // 4

//단항 산술 연산자
var x = 1;

// ++ , -- 연산자는 피연산자의 값을 변경하는 암묵적 할당이 이루어진다.
x++;
console.log(x);    // x = x + 1;

x--;
console.log(x);    // x = x - 1;
```

단항 산술 연산자는 위치에 의미가 있다 

피연산자의 앞에 있을 경우 증가 또는 감소를 먼저 연산한 후 다른 연산을 수행 

뒤에 있을 경우는 다른 연산을 수행 한후에 증가 혹은 감소를 연산한다.

+는 아무 일도 없고 -는 양수는 음수로 음수는 양수로 값을 반전 시킨다. (부수효과가 없다)

암묵적 할당이 이루어 지는것을 부수효과로 암묵적 타입 연산자 또는 강제 변환이라 한다.

### 문자열 연결 연산자

+연산자는 피연산자중 하나이상이 문자열이면 문자열 연결 연산자로 동작한다.

이는 암묵적으로 타입이 자동 변환 되는 것으로 이를 암묵적 타입 연산자 또는 강제 변환이라 하는데 

단항 연산자의 +/- 단항연산자도 이에 속한다.

할당 연산자

할당연산자는 = 를 말하며 수학적 의미인 같다가 아닌 우항의 값을 좌항에 대입한다는 의미를 가지고 있다.

할당문은 값으로 평가되는 표현식으로 할당된 값으로 평가된다.

- 부수효과
    
    피연산자의 값을 변환 시켜 다른 코드에 영향을 주는 것 ( 할당연산자(=) , 증가/감소 연산자 (++ /  - - ) , delete연산자는 부수효과를 가진다.
    

비교연산자

비교 연산자는 좌항과 우항의 피연산자를 비교하고 그 결과를 불리언 값으로 반환한다.

동등 비교 / 연산자 일치 비교 연산자는 엄격의 정도가 다르다.

| == | 동등 비교 | x와 y 의  값이 같음 |
| --- | --- | --- |
| === | 일치 비교  | x와 y의 값과 타입이 같음 |
| ! = | 부동등 비교 | x 와 y의 값이 다름  |
| ! == | 불일치 비교 | x 와 y 의 값과 타입이 다름 |

===동등 비교 연산자는 타입이 아닌 값만을 보기 때문에 암묵적으로 타입변환을 통해 타입을 일치시킨후 값이 같은지 비교를 하게 된다.

동등비교는 예측하기 어려운 결과를 만들기 때문에 일치 비교연산자를 많이 사용한다.

일치 비교 연산자에서 주의해야 하는 것은 NaN이다.

```jsx
NaN === NaN    // false
//NaN은 자신과 일치 하지 않는 유일한 값이다.
```

### 대소관계 비교 연산자

| > | x 가 y 보다 크다 |
| --- | --- |
| < | x 가 y 보다 작다 |
| > = | x 가 y 보다 크거나 같다 |
| < = | x 가 y  보다 작거나 같다 |

크기를 비교한 후 불리언 값을 반환한다.

### 삼항 조건 연산자

삼항 조건 연산자는 조건식의 평가 결과에 따라 반환할 값을 결정 한다. 부수효과는 없다.

***조건식 ? 조건식이 true일때 반환할 값 : 조건식이 false 일때 반환할 값*** 

삼항 조건 연산자는 if else 문과 비슷해 보이지만 차이가 있다.

사항 조건 연산자는 표현식은 값처럼 사용 할 수 있지만 if…else문은 값처럼 사용 할 수 없다.

논리연산자

논리 연산자는 우항과 좌항의 피연산자를 논리 연산한다.

| || | 논리 합 ( OR) |
| --- | --- |
| && | 논리 곱  (AND) |
| ! | 부정 (NOT) |

논리 부정에서 연산자는 언제나 불리언 값을 반환하는데 피연산자가 불리언 값일 필요는 없다.

불리언이 아니면 암묵적으로 타입을 변환한다.