# 05장 표현식과 문

### **값&리터럴**

값은 식이 평가되어 생성된 결과를 말한다.

값은 다양한 방법으로 생성 할 수있다 가장기본적으로 사용하는 것은 리터럴 이다.

리터럴은 사람이 이해 할 수있는 문자 또는 약속 된 기호를 사용해 값을 생성하는 표기법을 말한다.

자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다.

즉, 리터럴은 값을 생성하기 위해 미리 약속한 표기법이라 할 수 있다.

ex) 정수 리터럴 , 부동소수 리터럴 , 2진수 리터럴 , 8진수 리터럴 , 16진수 리터럴 , 문자열 리터럴 , 불리언 리터럴 , null 리터럴 , undefined 리터럴 , 객체 리터럴 , 배열 리터럴 , 함수 리터럴 , 정규 표현식 리터럴 

### **표현식**

표현식은 값으로 평가 될 수 있는 문이다 즉, 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다. 

```jsx
var score = 100; 
```

```jsx
var score = 50 + 50 ;    //100
```

```jsx
score;    // → 100 
```

모두 평가 되어 값을 생성하므로 표현식이다.

score; 도 값을 생성하지는 않지만 평가 되므로 표현식이다.

1+2=3 에서 1+2와 3은 동치 이다. (동치→평등한 관계)

이처럼 표현식은 값처럼 사용 될 수 있다. 이것은 문법적으로 값이 위치 할 수 있는 자리에는 표현식도 위치 할 수 있다는 것을 나타낸다.

### **문**

문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.

문의 집합으로 이루어진것이 바로 프로그램이며 문을 작성하고 순서에 맞게 나열하는 것이 프로그래밍이다. 

문은 여러 토큰으로 구성 된다. 토큰이란 문법적인 의미를 가지며 문법적으로 더 이상 나눌수 없는 코드의 기본 요소를 의미한다. 예를 들어 키워드 식별자 연산자 리터럴 세미콜론이나 마침표 등의 특수기호는 문법적 의미를 가지며 더이상 나눌수 없는 코드의 기본 요소 이므로 모두 토큰이다.

```jsx
// 변수 선언문
var x; 

// 할당문
x = 5;
 
// 함수 선언문
funtion foo(){}
 
// 조건문 
if(x>1){console.log(x);}

// 반복문
for(var i = 0; i < 2; i++){console.log(i);}
```

### **세미콜론과 자동삽입 기능**

세미콜론은 문의 종료를 나타낸다. 자바스크립트 엔진은 세미콜론으로 문의 종료한 위치를 파악하고 순차적으로 하나씩 문을 실행한다.

단, 0개 이상의 문을 중괄호로 묶은 코드블록({…}) 뒤에는 세미콜론을 붙이지 않는다.

### **표현식과 표현식이 아닌 문**

문에는 표현식인 문과 표현식이 아닌 문이 있다. 표현식인 문은 값으로 평가 될수있는 문이며 표현식이 아닌것은 표현 될 수 없다.

표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단한 방법은 변수에 할당하여 보는 것 이다.