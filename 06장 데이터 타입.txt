# 06장  데이터 타입

### 데이터 타입

데이터 타입은 데이터의 종류를 말하며 자바스크립트의 모든 값은 데이터 타입을 갖는다.

데이터 타입은 7가지를 제공 하고 있는데 이것을 원시 타입과 객체 타입 두가지로 분류한다.

| 원시타입  | 숫자 타입  , 문자열 타입 , 불리언 타입 , undefined 타입 , null 타입 , 심벌 타입 |
| --- | --- |
| 객체 타입  | (객체 , 함수 , 배열 등) |

### 숫자타입

C나 자바의 경우 int, long, float,double 등과 같은 다양한 숫자의 타입을 제공하나 

자바스크립트에서는 하나의 숫자 타입만이 존재한다.

자바스크립트에서는 배정밀도 64비트 부동소수점 형식을 따르기 때문에 모든 수를 실수로 저장한다. 그렇기 때문에 0.1+ 0.2 == 0.3 같은 연산에도 오류가 난다.

- 배정밀도 64비트 부동소수점
    
    컴퓨터는 모든 데이터를 2진법으로 저장하기 때문에, 만약 어떤 수의(특히 소수의 경우) 분모의 해당 하는 수가 2의 거듭제곱 형태이면 유한소수가 되고, 2의 거듭제곱 형태가 아니면 무한소수가 된다.
    
    따라서 자바스크립트가 무한소수를 저장하면 64비트의 공간을 초과하게 된다.(64비트 부동소수점)이 때 자바스크립트는 64비트를 초과하는 부분을 반올림해서 저장하기 때문에, 우리가 원하는 정확한 숫자를얻지 못하고 근사치를 얻게된다. 이 것이 연산과정에서 오차가 발생할 수 있는 이유이다.
    
    - 자바스크립트 뿐만 아니라 부동소수점으로 숫자(Number)를 저장하는 모든 프로그래밍 언어는 동일한 문제를 지닌다.
    - 그러나 타언어(자바의 경우)는 숫자를 선언할 때 변수의 타입을 다르게 선언함으로써 내부의 연산오류를 제어한다.
    - 자바스크립트는 모든 숫자를 동일한 선언자로 선언하기 때문에 이러한 연산 오류에 취약하다.
    - 그래서 자바스크립트는 이러한 연산 오류를 해결하기 위해 외부 오픈소스 라이브러리를 사용해야    한다.(특히 연산이 많은 경우)
    - 사실상 실무에서는 소수점 이하 몇 자리 까지만 숫자를 나타낸다는 포맷이 존재하므로, 위와 같은 연산 오류가 흔하게 발생하지는 않는다. 하지만 자바스크립트는 숫자를 64비트 부동소수점으로 저장하고 있으며,    언제든지 위와 같은 사례의 오류가 발생할 수 있음을 인지하고 있어야 한다.

### **undefined 타입**

undefined의 값은 undefined가 유일하다.

var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화 된다. 

자바스크립트 엔진이 변수를 초기화 하는데 사용하는 undefined를 개발자가 의도적으로 변수에 할당한다면 본래 취지와 어긋날 뿐더러 혼란을 줄수가 있어 권장하지 않는다 

변수에 값이 없다는 것을 명시하고 싶을때는 null을 할당한다.

### **null 타입**

null타입의 값은 null이 유일하다.

자바스크립트는 대소문자를 구분하므로 null , Null , NULL은 다르다.

프로그래밍 언어에서 null은 변수값이 없다는 것으로 null을 할당 하는 것은 이전에 참조하던 값을 더이상 참조하지 않는다는 뜻으로 이전에 할당 되어 있던 값에 참조를 명시적으로 제거 함을 뜻하며 

자바스크립트 엔진은 누구도 참조 하지 않는 메모리 공간에 대해 가비지콜렉션을 수행할 것이다.

```jsx
<!DOCTYPE html>
<html>
<body>
	<script>
		var element = document.querySelector('.myClass');
		
		//HTML문서에 myClass 클래스를 갖는 요소가 없다면 null을 반환한다.
		console.log(element); // null
	</script>
</body>
</html>
```

함수가 유효한 값을 반환 할 수 없는 경우 명시적으로 null을 반환 하기도한다.

### **심벌 타입**

심벌타입은 변경 불가능한 원시타입이다. 심벌값은 다른 값과 중복되지 않는 유일무이한 값이다.

따라서 주로 충돌할 위험이 없는 객체의 유일한 프로퍼티키를 만들기 위해 사용.

함수를 호출해 생성한다. 

```jsx
//심벌 값 생성
var key = Symbol('key');
console.log(typeof key);    //symbol

//객체 생성
var obj = {};

//이름이 충돌할 위험이 없는 유일무이한 값인 심벌을 프로퍼티 키로 사용
obj[key] = 'value';
console.log(obj[key]);    // value
```

### 데이터 타입의 필요성

값은 메모리에 저장하고 참조 할 수 있어야하는데 저장 하기 위해선 주어진 값을 어떤 타입인지 자바스크립트 엔진이 해석을 하고 저장하기 위해 메모리 공간을 확보한후 2진수로 저장을 한다.

ECMAScript 사양은 문자열과 숫자타입 외에는 데이터타입의 크기를 명시적으로 규정하고 있지 않다.

- 값을 저장할때 획보해야하는 메모리 공간의 크기를 결정하기 위해
- 값을 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기위해
- 메모리에서 읽어들인 2진수를 어떻게 해석할지 결정하기 위해

### 동적 타이핑

 자바스크립트는 변수를 선언 할때 var, let , const 키워드를 사용하여 변수를 선언할쁜이지만 

자바나 c언어같은 정적 타입언어 등은 데이터 타입을 사전에 선언 해야 한다.

정적 타입 언어는 변수의 타입을 변경 할 수 없으며 변수에 선언한 타입에 맞는 값만 할당 할 수 있으며 컴파일 시점에 타입체크를 수행한다.

자바스크립트에서는 어떤 타입의 값이든 자유롭게 할당 할 수 있고 그것을 typeof를 이용하여 테이터 타입을 조사할 수 있다. typeof는 변수에 할당된 값이 아닌 데이터 타입을 문자열로 반환을 한다.

**자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정되며 재할당을 통해 타입은 언제든 동적으로 변할 수 있다 이것을 동적 타이핑이라 한며 동적 타입언어라 한다.**

변수 자체는 타입을 가지지 않지만 값은 타입을 가진다. 따라서 변수는 가지는 값에 의해 변수의 타입이 동적으로 결정이 된다.